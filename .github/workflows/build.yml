name: Build (Win-x64)

on:
  push: { branches: [ main ] }
  pull_request: { branches: [ main ] }
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Locate project
        id: locate
        shell: pwsh
        run: |
          $target = gci -Recurse -Filter GE-Ranger-Programmer.csproj | Select-Object -First 1
          if (-not $target) { $target = gci -Recurse -Filter *.csproj | Select-Object -First 1 }
          if (-not $target) { Write-Error "No .csproj found in repository."; exit 1 }
          "csproj=$($target.FullName)" >> $env:GITHUB_OUTPUT
          "projdir=$($target.DirectoryName)" >> $env:GITHUB_OUTPUT
          Write-Host "Using project: $($target.FullName)"

      # RID-aware restore/build/publish so NETSDK1047 can't happen
      - name: Restore (win-x64)
        shell: pwsh
        run: dotnet restore "${{ steps.locate.outputs.csproj }}" -r win-x64

      - name: Build (Release, win-x64)
        shell: pwsh
        run: dotnet build "${{ steps.locate.outputs.csproj }}" -c Release -r win-x64 --no-restore

      - name: Publish (Release, win-x64)
        shell: pwsh
        run: dotnet publish "${{ steps.locate.outputs.csproj }}" -c Release -r win-x64 --no-build --no-restore

      - name: Stage artifact (bin/src/docs)
        shell: pwsh
        run: |
          $out  = "package"
          $bin  = Join-Path $out "bin"
          $srcd = Join-Path $out "src"
          $docs = Join-Path $out "docs"
          New-Item -ItemType Directory -Force -Path $bin,$srcd,$docs | Out-Null

          $tfm = "net8.0-windows"
          $pub = Join-Path "${{ steps.locate.outputs.projdir }}" "bin\Release\$tfm\win-x64\publish"
          if (-not (Test-Path $pub)) { Write-Error "Publish output not found at: $pub"; exit 1 }

          # 1) BIN: published app + optional driver
          Copy-Item "$pub\*" "$bin\" -Recurse -Force
          if (Test-Path "Drivers\inpoutx64.dll") { Copy-Item "Drivers\inpoutx64.dll" "$bin\" -Force }
          if (Test-Path "Drivers\LICENSE.txt")   { Copy-Item "Drivers\LICENSE.txt"   (Join-Path $bin "driver_LICENSE.txt") -Force }

          # 2) DOCS: Docs/ or docs/
          if (Test-Path "Docs") { Copy-Item "Docs\*" "$docs\" -Recurse -Force }
          elseif (Test-Path "docs") { Copy-Item "docs\*" "$docs\" -Recurse -Force }

          # 3) SRC: copy source then strip bin/obj
          Copy-Item "src" "$out\" -Recurse -Force -ErrorAction SilentlyContinue
          if (Test-Path $srcd) {
            gci "$srcd" -Recurse -Directory | Where-Object { $_.Name -in @('bin','obj') } | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          }

          @"
GE-Ranger-Programmer build artifact
Contents:
- bin  : executable build (Release, win-x64) + optional inpoutx64.dll
- src  : source files (bin/obj removed)
- docs : documentation from Docs/ or docs/
"@ | Set-Content (Join-Path $out "README.txt")

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: GE-Ranger-Programmer-win-x64
          path: package/
